{"version":3,"sources":["../src/input.tsx","../src/regexp.ts","../src/sync-timeouts.ts","../src/use-previous.ts"],"sourcesContent":["'use client'\n\nimport * as React from 'react'\n\nimport { REGEXP_ONLY_DIGITS } from './regexp'\nimport { syncTimeouts } from './sync-timeouts'\nimport { OTPInputProps, RenderProps } from './types'\nimport { usePrevious } from './use-previous'\n\nexport const OTPInputContext = React.createContext<RenderProps>(\n  {} as RenderProps,\n)\n\nexport const OTPInput = React.forwardRef<HTMLInputElement, OTPInputProps>(\n  (\n    {\n      value: uncheckedValue,\n      onChange: uncheckedOnChange,\n      maxLength,\n      textAlign = 'left',\n      pattern = REGEXP_ONLY_DIGITS,\n      inputMode = 'numeric',\n      onComplete,\n      containerClassName,\n      noScriptCSSFallback = NOSCRIPT_CSS_FALLBACK,\n\n      render,\n      children,\n\n      ...props\n    },\n    ref,\n  ) => {\n    // Only used when `value` state is not provided\n    const [internalValue, setInternalValue] = React.useState(\n      typeof props.defaultValue === 'string' ? props.defaultValue : '',\n    )\n\n    // Definitions\n    const value = uncheckedValue ?? internalValue\n    const previousValue = usePrevious(value)\n    const onChange = React.useCallback(\n      (newValue: string) => {\n        uncheckedOnChange?.(newValue)\n        setInternalValue(newValue)\n      },\n      [uncheckedOnChange],\n    )\n    const regexp = React.useMemo(\n      () =>\n        pattern\n          ? typeof pattern === 'string'\n            ? new RegExp(pattern)\n            : pattern\n          : null,\n      [pattern],\n    )\n\n    /** useRef */\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const containerRef = React.useRef<HTMLDivElement>(null)\n    const initialLoadRef = React.useRef({\n      value,\n      onChange,\n      isIOS:\n        typeof window !== 'undefined' &&\n        window?.CSS?.supports?.('-webkit-touch-callout', 'none'),\n    })\n    const inputMetadataRef = React.useRef<{\n      prev: [number | null, number | null, 'none' | 'forward' | 'backward']\n    }>({\n      prev: [\n        inputRef.current?.selectionStart,\n        inputRef.current?.selectionEnd,\n        inputRef.current?.selectionDirection,\n      ],\n    })\n    React.useImperativeHandle(ref, () => inputRef.current, [])\n    React.useEffect(() => {\n      const input = inputRef.current\n      const container = containerRef.current\n\n      if (!input || !container) {\n        return\n      }\n\n      // Sync input value\n      if (initialLoadRef.current.value !== input.value) {\n        initialLoadRef.current.onChange(input.value)\n      }\n\n      // Previous selection\n      inputMetadataRef.current.prev = [\n        input.selectionStart,\n        input.selectionEnd,\n        input.selectionDirection,\n      ]\n      function onDocumentSelectionChange() {\n        if (document.activeElement !== input) {\n          setMirrorSelectionStart(null)\n          setMirrorSelectionEnd(null)\n          return\n        }\n\n        // Aliases\n        const _s = input.selectionStart\n        const _e = input.selectionEnd\n        const _dir = input.selectionDirection\n        const _ml = input.maxLength\n        const _val = input.value\n        const _prev = inputMetadataRef.current.prev\n\n        // Algorithm\n        let start = -1\n        let end = -1\n        let direction: 'forward' | 'backward' | 'none' = undefined\n        if (_val.length !== 0 && _s !== null && _e !== null) {\n          const isSingleCaret = _s === _e\n          const isInsertMode = _s === _val.length && _val.length < _ml\n\n          if (isSingleCaret && !isInsertMode) {\n            const c = _s\n            if (c === 0) {\n              start = 0\n              end = 1\n              direction = 'forward'\n            } else if (c === _ml) {\n              start = c - 1\n              end = c\n              direction = 'backward'\n            } else if (_ml > 1 && _val.length > 1) {\n              let offset = 0\n              if (_prev[0] !== null && _prev[1] !== null) {\n                direction = c < _prev[1] ? 'backward' : 'forward'\n                const wasPreviouslyInserting =\n                  _prev[0] === _prev[1] && _prev[0] < _ml\n                if (direction === 'backward' && !wasPreviouslyInserting) {\n                  offset = -1\n                }\n              }\n\n              start = offset + c\n              end = offset + c + 1\n            }\n          }\n\n          if (start !== -1 && end !== -1 && start !== end) {\n            inputRef.current.setSelectionRange(start, end, direction)\n          }\n        }\n\n        // Finally, update the state\n        const s = start !== -1 ? start : _s\n        const e = end !== -1 ? end : _e\n        const dir = direction ?? _dir\n        setMirrorSelectionStart(s)\n        setMirrorSelectionEnd(e)\n        // Store the previous selection value\n        inputMetadataRef.current.prev = [s, e, dir]\n      }\n      document.addEventListener('selectionchange', onDocumentSelectionChange, {\n        capture: true,\n      })\n\n      // Set initial mirror state\n      onDocumentSelectionChange()\n      document.activeElement === input && setIsFocused(true)\n\n      // Apply needed styles\n      if (!document.getElementById('input-otp-style')) {\n        const styleEl = document.createElement('style')\n        styleEl.id = 'input-otp-style'\n        document.head.appendChild(styleEl)\n\n        if (styleEl.sheet) {\n          const autofillStyles =\n            'background: transparent !important; color: transparent !important; border-color: transparent !important; opacity: 0 !important; box-shadow: none !important; -webkit-box-shadow: none !important; -webkit-text-fill-color: transparent !important;'\n\n          safeInsertRule(\n            styleEl.sheet,\n            '[data-input-otp]::selection { background: transparent !important; color: transparent !important; }',\n          )\n          safeInsertRule(\n            styleEl.sheet,\n            `[data-input-otp]:autofill { ${autofillStyles} }`,\n          )\n          safeInsertRule(\n            styleEl.sheet,\n            `[data-input-otp]:-webkit-autofill { ${autofillStyles} }`,\n          )\n          // iOS\n          safeInsertRule(\n            styleEl.sheet,\n            `@supports (-webkit-touch-callout: none) { [data-input-otp] { letter-spacing: -.6em !important; font-weight: 100 !important; font-stretch: ultra-condensed; font-optical-sizing: none !important; left: -1px !important; right: 1px !important; } }`,\n          )\n          // PWM badges\n          safeInsertRule(\n            styleEl.sheet,\n            `[data-input-otp] + * { pointer-events: all !important; }`,\n          )\n        }\n      }\n      // Track root height\n      const updateRootHeight = () => {\n        if (container) {\n          container.style.setProperty(\n            '--root-height',\n            `${input.clientHeight}px`,\n          )\n        }\n      }\n      updateRootHeight()\n      const resizeObserver = new ResizeObserver(updateRootHeight)\n      resizeObserver.observe(input)\n\n      return () => {\n        document.removeEventListener(\n          'selectionchange',\n          onDocumentSelectionChange,\n          { capture: true },\n        )\n        resizeObserver.disconnect()\n      }\n    }, [])\n\n    /** Mirrors for UI rendering purpose only */\n    const [isHoveringInput, setIsHoveringInput] = React.useState(false)\n    const [isFocused, setIsFocused] = React.useState(false)\n    const [mirrorSelectionStart, setMirrorSelectionStart] = React.useState<\n      number | null\n    >(null)\n    const [mirrorSelectionEnd, setMirrorSelectionEnd] = React.useState<\n      number | null\n    >(null)\n\n    /** Effects */\n    React.useEffect(() => {\n      syncTimeouts(() => {\n        // Forcefully remove :autofill state\n        inputRef.current?.dispatchEvent(new Event('input'))\n\n        // Update the selection state\n        const s = inputRef.current?.selectionStart\n        const e = inputRef.current?.selectionEnd\n        const dir = inputRef.current?.selectionDirection\n        if (s !== null && e !== null) {\n          setMirrorSelectionStart(s)\n          setMirrorSelectionEnd(e)\n          inputMetadataRef.current.prev = [s, e, dir]\n        }\n      })\n    }, [value, isFocused])\n\n    React.useEffect(() => {\n      if (previousValue === undefined) {\n        return\n      }\n\n      if (\n        value !== previousValue &&\n        previousValue.length < maxLength &&\n        value.length === maxLength\n      ) {\n        onComplete?.(value)\n      }\n    }, [maxLength, onComplete, previousValue, value])\n\n    /** Event handlers */\n    const _changeListener = React.useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        const newValue = e.currentTarget.value.slice(0, maxLength)\n        if (newValue.length > 0 && regexp && !regexp.test(newValue)) {\n          e.preventDefault()\n          return\n        }\n        const maybeHasDeleted =\n          typeof previousValue === 'string' &&\n          newValue.length < previousValue.length\n        if (maybeHasDeleted) {\n          // Since cutting/deleting text doesn't trigger\n          // selectionchange event, we'll have to dispatch it manually.\n          // NOTE: The following line also triggers when cmd+A then pasting\n          // a value with smaller length, which is not ideal for performance.\n          document.dispatchEvent(new Event('selectionchange'))\n        }\n        onChange(newValue)\n      },\n      [maxLength, onChange, previousValue, regexp],\n    )\n    const _focusListener = React.useCallback(() => {\n      if (inputRef.current) {\n        const start = Math.min(inputRef.current.value.length, maxLength - 1)\n        const end = inputRef.current.value.length\n        inputRef.current?.setSelectionRange(start, end)\n        setMirrorSelectionStart(start)\n        setMirrorSelectionEnd(end)\n      }\n      setIsFocused(true)\n    }, [maxLength])\n    // Fix iOS pasting\n    const _pasteListener = React.useCallback(\n      (e: React.ClipboardEvent<HTMLInputElement>) => {\n        const input = inputRef.current\n        if (!initialLoadRef.current.isIOS || !e.clipboardData || !input) {\n          return\n        }\n\n        const content = e.clipboardData.getData('text/plain')\n        e.preventDefault()\n\n        const start = inputRef.current?.selectionStart\n        const end = inputRef.current?.selectionEnd\n\n        const isReplacing = start !== end\n\n        const newValueUncapped = isReplacing\n          ? value.slice(0, start) + content + value.slice(end) // Replacing\n          : value.slice(0, start) + content + value.slice(start) // Inserting\n        const newValue = newValueUncapped.slice(0, maxLength)\n\n        if (newValue.length > 0 && regexp && !regexp.test(newValue)) {\n          return\n        }\n\n        input.value = newValue\n        onChange(newValue)\n\n        const _start = Math.min(newValue.length, maxLength - 1)\n        const _end = newValue.length\n\n        input.setSelectionRange(_start, _end)\n        setMirrorSelectionStart(_start)\n        setMirrorSelectionEnd(_end)\n      },\n      [maxLength, onChange, regexp, value],\n    )\n\n    /** Styles */\n    const rootStyle = React.useMemo<React.CSSProperties>(\n      () => ({\n        position: 'relative',\n        cursor: props.disabled ? 'default' : 'text',\n        userSelect: 'none',\n        WebkitUserSelect: 'none',\n        pointerEvents: 'none',\n      }),\n      [props.disabled],\n    )\n\n    const inputStyle = React.useMemo<React.CSSProperties>(\n      () => ({\n        position: 'absolute',\n        inset: 0,\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        textAlign,\n        opacity: '1', // Mandatory for iOS hold-paste\n        color: 'transparent',\n        pointerEvents: 'all',\n        background: 'transparent',\n        caretColor: 'transparent',\n        border: '0 solid transparent',\n        outline: '0 solid transparent',\n        boxShadow: 'none',\n        lineHeight: '1',\n        letterSpacing: '-.5em',\n        fontSize: 'var(--root-height)',\n        fontFamily: 'monospace',\n        fontVariantNumeric: 'tabular-nums',\n        // letterSpacing: '-1em',\n        // transform: 'scale(1.5)',\n        // paddingRight: '100%',\n        // paddingBottom: '100%',\n        // debugging purposes\n        // inset: undefined,\n        // position: undefined,\n        // color: 'black',\n        // background: 'white',\n        // opacity: '1',\n        // caretColor: 'black',\n        // padding: '0',\n        // letterSpacing: 'unset',\n        // fontSize: 'unset',\n        // paddingInline: '.5rem',\n      }),\n      [textAlign],\n    )\n\n    /** Rendering */\n    const renderedInput = React.useMemo(\n      () => (\n        <input\n          {...props}\n          data-input-otp\n          data-input-otp-mss={mirrorSelectionStart}\n          data-input-otp-mse={mirrorSelectionEnd}\n          inputMode={inputMode}\n          pattern={regexp?.source}\n          style={inputStyle}\n          maxLength={maxLength}\n          value={value}\n          ref={inputRef}\n          onPaste={e => {\n            _pasteListener(e)\n            props.onPaste?.(e)\n          }}\n          onChange={_changeListener}\n          onMouseOver={e => {\n            setIsHoveringInput(true)\n            props.onMouseOver?.(e)\n          }}\n          onMouseLeave={e => {\n            setIsHoveringInput(false)\n            props.onMouseLeave?.(e)\n          }}\n          onFocus={e => {\n            _focusListener()\n            props.onFocus?.(e)\n          }}\n          onBlur={e => {\n            setIsFocused(false)\n            props.onBlur?.(e)\n          }}\n        />\n      ),\n      [\n        _changeListener,\n        _focusListener,\n        _pasteListener,\n        inputMode,\n        inputStyle,\n        maxLength,\n        mirrorSelectionEnd,\n        mirrorSelectionStart,\n        props,\n        regexp?.source,\n        value,\n      ],\n    )\n\n    const contextValue = React.useMemo<RenderProps>(() => {\n      return {\n        slots: Array.from({ length: maxLength }).map((_, slotIdx) => {\n          const isActive =\n            isFocused &&\n            mirrorSelectionStart !== null &&\n            mirrorSelectionEnd !== null &&\n            ((mirrorSelectionStart === mirrorSelectionEnd &&\n              slotIdx === mirrorSelectionStart) ||\n              (slotIdx >= mirrorSelectionStart && slotIdx < mirrorSelectionEnd))\n\n          const char = value[slotIdx] !== undefined ? value[slotIdx] : null\n\n          return {\n            char,\n            isActive,\n            hasFakeCaret: isActive && char === null,\n          }\n        }),\n        isFocused,\n        isHovering: !props.disabled && isHoveringInput,\n      }\n    }, [\n      isFocused,\n      isHoveringInput,\n      maxLength,\n      mirrorSelectionEnd,\n      mirrorSelectionStart,\n      props.disabled,\n      value,\n    ])\n\n    const renderedChildren = React.useMemo(() => {\n      if (render) {\n        return render(contextValue)\n      }\n      return (\n        <OTPInputContext.Provider value={contextValue}>\n          {children}\n        </OTPInputContext.Provider>\n      )\n    }, [children, contextValue, render])\n\n    return (\n      <>\n        {noScriptCSSFallback !== null && (\n          <noscript>\n            <style>{noScriptCSSFallback}</style>\n          </noscript>\n        )}\n\n        <div\n          ref={containerRef}\n          data-input-otp-container\n          style={rootStyle}\n          className={containerClassName}\n        >\n          {renderedChildren}\n\n          <div\n            style={{\n              position: 'absolute',\n              inset: 0,\n              pointerEvents: 'none',\n            }}\n          >\n            {renderedInput}\n          </div>\n        </div>\n      </>\n    )\n  },\n)\nOTPInput.displayName = 'Input'\n\nfunction safeInsertRule(sheet: CSSStyleSheet, rule: string) {\n  try {\n    sheet.insertRule(rule)\n  } catch {\n    console.error('input-otp could not insert CSS rule:', rule)\n  }\n}\n\n// Decided to go with <noscript>\n// instead of `scripting` CSS media query\n// because it's a fallback for initial page load\n// and the <script> tag won't be loaded\n// unless the user has JS disabled.\nconst NOSCRIPT_CSS_FALLBACK = `\n[data-input-otp] {\n  --nojs-bg: white !important;\n  --nojs-fg: black !important;\n\n  background-color: var(--nojs-bg) !important;\n  color: var(--nojs-fg) !important;\n  caret-color: var(--nojs-fg) !important;\n  letter-spacing: .25em !important;\n  text-align: center !important;\n  border: 1px solid var(--nojs-fg) !important;\n  border-radius: 4px !important;\n  width: 100% !important;\n}\n@media (prefers-color-scheme: dark) {\n  [data-input-otp] {\n    --nojs-bg: black !important;\n    --nojs-fg: white !important;\n  }\n}`\n","export const REGEXP_ONLY_DIGITS = '^\\\\d+$'\nexport const REGEXP_ONLY_CHARS = '^[a-zA-Z]+$'\nexport const REGEXP_ONLY_DIGITS_AND_CHARS = '^[a-zA-Z0-9]+$'\n","export function syncTimeouts(cb: (...args: any[]) => unknown): number[] {\n  const t1 = setTimeout(cb, 0) // For faster machines\n  const t2 = setTimeout(cb, 1_0)\n  const t3 = setTimeout(cb, 5_0)\n  return [t1, t2, t3]\n}\n","import * as React from 'react'\n\nexport function usePrevious<T>(value: T) {\n  const ref = React.useRef<T>()\n  React.useEffect(() => {\n    ref.current = value\n  })\n  return ref.current\n}\n"],"mappings":"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","names":["React","REGEXP_ONLY_DIGITS","REGEXP_ONLY_CHARS","REGEXP_ONLY_DIGITS_AND_CHARS","syncTimeouts","cb","t1","t2","t3","React","usePrevious","value","ref","OTPInputContext","OTPInput","_a","ref","_b","uncheckedValue","uncheckedOnChange","maxLength","textAlign","pattern","REGEXP_ONLY_DIGITS","inputMode","onComplete","containerClassName","noScriptCSSFallback","NOSCRIPT_CSS_FALLBACK","render","children","props","__objRest","_c","_d","_e","internalValue","setInternalValue","value","previousValue","usePrevious","onChange","newValue","regexp","inputRef","containerRef","initialLoadRef","inputMetadataRef","input","container","onDocumentSelectionChange","setMirrorSelectionStart","setMirrorSelectionEnd","_s","_dir","_ml","_val","_prev","start","end","direction","isSingleCaret","isInsertMode","c","offset","wasPreviouslyInserting","s","e","dir","setIsFocused","styleEl","autofillStyles","safeInsertRule","updateRootHeight","resizeObserver","isHoveringInput","setIsHoveringInput","isFocused","mirrorSelectionStart","mirrorSelectionEnd","syncTimeouts","_changeListener","_focusListener","_pasteListener","content","_start","_end","rootStyle","inputStyle","renderedInput","__spreadProps","__spreadValues","contextValue","_","slotIdx","isActive","char","renderedChildren","sheet","rule"]}